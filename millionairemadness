import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.OutputStream; // Import for OutputStream
import java.util.PriorityQueue;
import java.util.StringTokenizer; // Import for StringTokenizer

public class millionairemadness {
    public static class Pair implements Comparable<Pair> {
        int i;
        int j;
        int w;

        public Pair(int i, int j, int w) {
            this.i = i;
            this.j = j;
            this.w = w;
        }

        public int compareTo(Pair p) {
            return this.w - p.w; // Compare based on weight
        }
    }

    public static void main(String[] args) {
        Kattio io = new Kattio(System.in, System.out);
        int r = io.getInt();
        int c = io.getInt();
        int[][] maze = new int[r][c];

        // Reading the maze input
        for (int i = 0; i <= r-1; i++) {
            for (int j = 0; j <= c-1; j++) {
                maze[i][j] = io.getInt();
            }
        }

        boolean[][] visited = new boolean[r][c]; // Default set to false
        PriorityQueue<Pair> queue = new PriorityQueue<>();
        int ladder = 0;
        queue.offer(new Pair(0, 0, 0)); // Start from the top-left corner

        // Dijkstra-like approach to find the minimum ladder height
        while (!visited[r - 1][c - 1]) {
            Pair temp = queue.poll();
            int row = temp.i;
            int col = temp.j;
            int z = temp.w;
            ladder = Math.max(z, ladder); // Update the ladder height
            int height = maze[row][col];
            visited[row][col] = true;

            // Explore neighbors (up, down, right, left)
            if (row >= 1 && !visited[row - 1][col]) {
                queue.offer(new Pair(row - 1, col, maze[row - 1][col] - height));
            }
            if (row < r - 1 && !visited[row + 1][col]) {
                queue.offer(new Pair(row + 1, col, maze[row + 1][col] - height));
            }
            if (col < c - 1 && !visited[row][col + 1]) {
                queue.offer(new Pair(row, col + 1, maze[row][col + 1] - height));
            }
            if (col >= 1 && !visited[row][col - 1]) {
                queue.offer(new Pair(row, col - 1, maze[row][col - 1] - height));
            }
        }

        io.println(ladder);
        io.close();
    }
}

// Kattio class for fast input/output
class Kattio extends PrintWriter {
    private BufferedReader br;
    private StringTokenizer st;

    public Kattio(InputStream i, OutputStream o) {
        super(o);
        br = new BufferedReader(new InputStreamReader(i));
    }

    public String next() {
        while (st == null || !st.hasMoreTokens()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    public int getInt() {
        return Integer.parseInt(next());
    }

    public long getLong() {
        return Long.parseLong(next());
    }

    public double getDouble() {
        return Double.parseDouble(next());
    }

    public String getString() {
        return next();
    }
}
